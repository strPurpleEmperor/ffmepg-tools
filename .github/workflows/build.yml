name: "Tauri build"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-tauri:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install pnpm
        run: npm install -g pnpm

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.


      # 在不同平台下载 FFmpeg
      - name: Download FFmpeg (Windows)
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          $ffmpegUrl = "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip"
          $downloadPath = "resources/ffmpeg.zip"
          $installDir = "resources/ffmpeg"

          # 确保目标目录存在
          mkdir -p $installDir

          # 下载并解压
          Invoke-WebRequest -Uri $ffmpegUrl -OutFile $downloadPath
          Expand-Archive -Path $downloadPath -DestinationPath $installDir

          # 获取解压后的文件夹名（可能包含版本号）
          $extractedFolder = Get-ChildItem -Path $installDir | Where-Object { $_.PSIsContainer } | Select-Object -First 1

          # 移动 ffmpeg.exe 到 resources/ffmpeg 根目录
          Move-Item "${extractedFolder.FullName}\bin\ffmpeg.exe" "${installDir}\ffmpeg.exe"

          echo "FFmpeg for Windows has been moved to resources/ffmpeg/ffmpeg.exe"
      - name: Download FFmpeg (macOS)
        if: matrix.platform == 'macos-latest'
        shell: bash
        run: |
          FFMPEG_URL="https://evermeet.cx/ffmpeg/getrelease/ffmpeg/zip"
          download_path="resources/ffmpeg.zip"
          install_dir="resources/ffmpeg"

          # 确保目标目录存在
          mkdir -p $install_dir

          # 下载并解压 FFmpeg
          curl -L $FFMPEG_URL -o $download_path
          unzip $download_path -d $install_dir

          # 这里不需要额外的 mv 命令，因为 unzip 已经将文件放到了正确的位置。
          # 之前失败的 ls 命令也应移除。

          echo "FFmpeg 成功解压到 $install_dir。"

      - name: Download FFmpeg (Linux)
        if: matrix.platform == 'ubuntu-latest'
        shell: bash
        run: |
          FFMPEG_URL="https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz"
          download_path="resources/ffmpeg.tar.xz"
          install_dir="resources/ffmpeg"

          mkdir -p $install_dir
          curl -L $FFMPEG_URL -o $download_path

          # 使用 --strip-components=1 解压，直接将内容放在 install_dir
          tar -xf $download_path -C $install_dir --strip-components=1

          # 移动 ffmpeg 可执行文件到 resources/ffmpeg 根目录
          mv "${install_dir}/ffmpeg" "${install_dir}/ffmpeg"

          echo "FFmpeg for Linux has been moved to resources/ffmpeg/ffmpeg"
      # 构建 Tauri 应用
      - name: install frontend dependencies
        run: pnpm install # change this to npm, pnpm or bun depending on which one you use.

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: "App v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}